[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Master’s Project",
    "section": "",
    "text": "MinimumGOT"
  },
  {
    "objectID": "index.html#notebooks",
    "href": "index.html#notebooks",
    "title": "Master’s Project",
    "section": "Notebooks",
    "text": "Notebooks"
  },
  {
    "objectID": "notebooks/01-get-data.html",
    "href": "notebooks/01-get-data.html",
    "title": "FRBSTATS Data",
    "section": "",
    "text": "Note\n\n\n\n📌 Goal: get data from FRBStats\n\n\n\nimport requests\nimport logging\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom mw_plot import MWSkyMap\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport numpy as np\n\n%matplotlib inline\n\n\ndef request_data(url, **kwargs) -> requests.Response:\n    logging.debug(f\"Awaiting data from {url}\")\n    return requests.get(url, **kwargs)\n\nasync def download_csv(url:str='https://www.herta-experiment.org/frbstats/catalogue.csv', output_file='../data/raw/external/data.csv') -> str:\n    result = request_data(url)\n    if result.status_code != 200:\n        raise requests.RequestException(result.status_code)\n    with open(output_file, 'w') as f:\n        f.write(result.content.decode(result.encoding))\n        logging.debug(f'Writing data to {output_file}')\n    return output_file\n\n\ndata = pd.read_csv(await download_csv())\ndata.columns\n\nIndex(['frb', 'utc', 'mjd', 'telescope', 'ra', 'dec', 'l', 'b', 'frequency',\n       'dm', 'flux', 'width', 'fluence', 'snr', 'reference', 'redshift',\n       'redshift_measured', 'ra_error', 'dec_error', 'dm_error'],\n      dtype='object')\n\n\n\ndata.plot.scatter(x='redshift', y='dm')\n\n<AxesSubplot: xlabel='redshift', ylabel='dm'>\n\n\n\n\n\n\ndata.plot.scatter(x='l', y='b')\n\n<AxesSubplot: xlabel='l', ylabel='b'>\n\n\n\n\n\n\n# Set projection & properties\ncanvas = MWSkyMap(projection='aitoff', grayscale=False, figsize=(20, 12.5))\n\n# alpha value for the milkyway image\ncanvas.imalpha = 1.\n\n# set up plot title\ncanvas.title = r'$\\mathrm{FRB \\ } l \\mathrm{-} b \\mathrm{ \\ Distribution}$'+'\\n'\ncanvas.fontsize = 48\n\n\ncoords = SkyCoord(ra=data['ra'][0], dec=data['dec'][0], unit=(u.hourangle, u.deg))\ncoords\n\n<SkyCoord (ICRS): (ra, dec) in deg\n    (286.72083333, -40.62055556)>\n\n\n\ngalcoords = SkyCoord(l=data['l'][0], b=data['b'][0], unit='deg', frame='galactic')\ngalcoords\n\n<SkyCoord (Galactic): (l, b) in deg\n    (356.64, -20.02)>\n\n\n\ndef to_sky_coord(row) -> SkyCoord:\n    return SkyCoord(l=row['l'], b=row['b'], unit='deg', frame='galactic')\n\ndata['galactic'] = data.apply(lambda x: to_sky_coord(x), axis=1)\n\ndata\n\n\n\n\n\n  \n    \n      \n      frb\n      utc\n      mjd\n      telescope\n      ra\n      dec\n      l\n      b\n      frequency\n      dm\n      flux\n      width\n      fluence\n      snr\n      reference\n      redshift\n      galactic\n    \n  \n  \n    \n      0\n      FRB 20010125A\n      2001-01-25 0:29:16\n      51934.02032\n      Parkes\n      19:06:53\n      -40:37:14\n      356.64\n      -20.02\n      -\n      790.3\n      0.54\n      -\n      -\n      -\n      https://www.wis-tns.org/object/20010125a\n      0.7083\n      <SkyCoord (Galactic): (l, b) in deg\\n    (356....\n    \n    \n      1\n      FRB 20010305A\n      2001-03-05 12:29:16\n      51973.52032\n      Parkes\n      4:57:20\n      -52:36:25\n      260.07\n      -38.35\n      1374\n      350.0\n      0.42\n      9\n      3.78\n      10.2\n      https://arxiv.org/abs/2004.04601\n      0.341\n      <SkyCoord (Galactic): (l, b) in deg\\n    (260....\n    \n    \n      2\n      FRB 20010312A\n      2001-03-12 11:06:48\n      51980.46306\n      Parkes\n      5:26:55\n      -64:56:19\n      274.72\n      -33.30\n      -\n      1187.0\n      0.25\n      -\n      -\n      -\n      https://www.wis-tns.org/object/20010312a\n      1.0897\n      <SkyCoord (Galactic): (l, b) in deg\\n    (274....\n    \n    \n      3\n      FRB 20010621A\n      2001-06-21 13:02:11\n      52081.54318\n      Parkes\n      18:52:05\n      -8:29:35\n      25.43\n      -4.00\n      -\n      745.0\n      0.41\n      -\n      -\n      -\n      https://www.wis-tns.org/object/20010621a\n      0.4454\n      <SkyCoord (Galactic): (l, b) in deg\\n    (25.4...\n    \n    \n      4\n      FRB 20010724A\n      2001-07-24 19:50:02\n      52114.82641\n      Parkes\n      1:18:06\n      -75:12:18\n      300.65\n      -41.81\n      -\n      375.0\n      30\n      -\n      -\n      -\n      https://www.wis-tns.org/object/20010724a\n      0.369\n      <SkyCoord (Galactic): (l, b) in deg\\n    (300....\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      806\n      FRB 20220105A\n      2022-01-05 0:19:19\n      59584.01341\n      ASKAP\n      13:55:51.4\n      +22:29:19.7\n      18.84\n      74.68\n      1632.5\n      583.0\n      -\n      -\n      -\n      10\n      https://www.wis-tns.org/object/20220105a\n      0.5724\n      <SkyCoord (Galactic): (l, b) in deg\\n    (18.8...\n    \n    \n      807\n      FRB 20220414A\n      2022-04-14 17:26:40\n      59683.72685\n      Tianlai\n      13:04:21\n      +48:18:05\n      117.02\n      68.68\n      747.5\n      208.1\n      128.4\n      2.2\n      204\n      15.1\n      https://www.wis-tns.org/object/20220414a\n      0.2169\n      <SkyCoord (Galactic): (l, b) in deg\\n    (117....\n    \n    \n      808\n      FRB 20220501C\n      2022-05-01 2:11:09\n      59700.09108\n      ASKAP\n      23:29:50\n      -32:27:00\n      11.26\n      -71.55\n      863.5\n      449.5\n      -\n      -\n      30\n      16.1\n      https://www.wis-tns.org/object/20220501c\n      0.4558\n      <SkyCoord (Galactic): (l, b) in deg\\n    (11.2...\n    \n    \n      809\n      FRB 20220610A\n      2022-06-10 22:26:43\n      59740.93522\n      ASKAP\n      23:23:60\n      -33:31:00\n      8.87\n      -70.13\n      1271.5\n      1458.1\n      -\n      5.6\n      43\n      29.8\n      https://www.wis-tns.org/object/20220610a\n      1.3836\n      <SkyCoord (Galactic): (l, b) in deg\\n    (8.87...\n    \n    \n      810\n      FRB 20220725A\n      2022-07-25 21:54:53\n      59785.91311\n      ASKAP\n      22:26:60\n      +34:52:60\n      92.14\n      -19.21\n      919.5\n      290.4\n      -\n      -\n      -\n      12.7\n      https://www.wis-tns.org/object/20220725a\n      0.2591\n      <SkyCoord (Galactic): (l, b) in deg\\n    (92.1...\n    \n  \n\n811 rows × 17 columns\n\n\n\n\ncanvas.scatter(ra=data['ra'].to_numpy()*u.degree, dec=data['dec'].to_numpy()*u.degree, s=150, alpha=0.6, edgecolor='white', linewidth=0.85, cmap='plasma')\n\nTypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'Unit'"
  },
  {
    "objectID": "notebooks/02-UMAP-HDBSCAN.html",
    "href": "notebooks/02-UMAP-HDBSCAN.html",
    "title": "Reproducing Chen et. al. (2021)’s unsupervised machine learning",
    "section": "",
    "text": "Note\n\n\n\n📌 Goal: This notebook tries to reproduce the results from https://ui.adsabs.harvard.edu/abs/2022MNRAS.509.1227C/abstract. As stated in the paper, verbatim\n\nOur goal is to map several observational and model-dependent parameters of each FRB to a 2D embedding plane by training the UMAP algorithm on the features of the training samples in CHIME/FRB dataset and finally identify possibly misclassified non-repeating FRBs which in fact have latent features of repeating FRBs. We define these possibly misclassified non-repeating FRBs as FRB repeater candidates in our paper."
  },
  {
    "objectID": "notebooks/02-UMAP-HDBSCAN.html#getting-the-data",
    "href": "notebooks/02-UMAP-HDBSCAN.html#getting-the-data",
    "title": "Reproducing Chen et. al. (2021)’s unsupervised machine learning",
    "section": "0. Getting the Data",
    "text": "0. Getting the Data\n\n0.1 Source\nThe paper uses data from CHIME/FRB Catalog with parameters calculated in Hashimoto et. al. 2022.\n\ncatalog: pd.DataFrame = pd.read_csv('../data/raw/external/Hashimoto2022_chimefrbcat1.csv')\ncatalog\n\n\n\n\n\n  \n    \n      \n      tns_name\n      previous_name\n      repeater_name\n      ra\n      ra_err\n      ra_notes\n      dec\n      dec_err\n      dec_notes\n      gl\n      ...\n      weight_fluence_error_m\n      weight\n      weight_error_p\n      weight_error_m\n      weighted_logrhoA\n      weighted_logrhoA_error_p\n      weighted_logrhoA_error_m\n      weighted_logrhoB\n      weighted_logrhoB_error_p\n      weighted_logrhoB_error_m\n    \n  \n  \n    \n      0\n      FRB20180725A\n      180725.J0613+67\n      -9999\n      93.42\n      0.04\n      -9999\n      67.10\n      0.20\n      -9999\n      147.29\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      FRB20180727A\n      180727.J1311+26\n      -9999\n      197.70\n      0.10\n      -9999\n      26.40\n      0.30\n      -9999\n      24.76\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      FRB20180729A\n      180729.J1316+55\n      -9999\n      199.40\n      0.10\n      -9999\n      55.58\n      0.08\n      -9999\n      115.26\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      3\n      FRB20180729B\n      180729.J0558+56\n      -9999\n      89.90\n      0.30\n      -9999\n      56.50\n      0.20\n      -9999\n      156.90\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      FRB20180730A\n      180730.J0353+87\n      -9999\n      57.39\n      0.03\n      -9999\n      87.20\n      0.20\n      -9999\n      125.11\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      594\n      FRB20190701A\n      -9999\n      -9999\n      277.50\n      0.20\n      -9999\n      59.00\n      0.20\n      -9999\n      88.29\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      595\n      FRB20190701B\n      -9999\n      -9999\n      302.90\n      0.20\n      -9999\n      80.20\n      0.20\n      -9999\n      112.88\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      596\n      FRB20190701C\n      -9999\n      -9999\n      96.40\n      0.20\n      -9999\n      81.60\n      0.30\n      -9999\n      132.18\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      597\n      FRB20190701D\n      -9999\n      -9999\n      112.10\n      0.20\n      -9999\n      66.70\n      0.20\n      -9999\n      149.28\n      ...\n      0.000649\n      1.361506\n      0.574701\n      0.206776\n      0.813142\n      0.485293\n      0.109293\n      0.894742\n      0.25519\n      0.19035\n    \n    \n      598\n      FRB20190701E\n      -9999\n      -9999\n      138.60\n      0.20\n      -9999\n      61.71\n      0.04\n      -9999\n      153.27\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n599 rows × 107 columns\n\n\n\n\n\n0.2 Dataset Validation\nWe first validate that the data is as described in the paper. According to the paper:\n\n\nThe initial dataset includes 501 non-repeating FRB sub-bursts from 474 sources and 93 repeating FRB sub-bursts from 18 sources.\n\n\nThe catalogue includes 535 FRBs at a frequency range between 400 and 800 MHz from 2018 July 25 to 2019 July 1. Since a repeating FRB source provides several FRBs and each FRB might include several sub-bursts, the actual number of applying subburst samples are 501 non-repeating + 93 repeating = 594 sub-bursts.\n\n\nWe can verify this using a simple dataframe method.\n\nstart: float = Time('2018-07-25').mjd\nend: float = Time('2019-07-01').mjd\n\ninterval: pd.Series = (start <= catalog['mjd_400']) & (catalog['mjd_400'] <= end)\ncatalog: pd.DataFrame = catalog[interval]\n\nrepeating: pd.DataFrame = catalog[(catalog['repeater_name'] != \"-9999\")]\nnon_repeating: pd.DataFrame = catalog[(catalog['repeater_name'] == \"-9999\")]\nprint(f\"Total repeaters\\t\\t: {len(repeating)}\",f\"Total non-repeaters\\t: {len(non_repeating)}\", sep=\"\\n\")\nprint(f\"Total sub-bursts\\t: {len(repeating) + len(non_repeating)}\")\n\nTotal repeaters     : 93\nTotal non-repeaters : 501\nTotal sub-bursts    : 594\n\n\n\n\n\n\n\n\nNote\n\n\n\nTODO Apply filter to get the number of sources. This filter only gets the number of sub bursts.\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat does the authors mean by “The catalogue includes 535 FRBs”? I could not think of a filter that fits the description."
  },
  {
    "objectID": "notebooks/02-UMAP-HDBSCAN.html#preprocessing",
    "href": "notebooks/02-UMAP-HDBSCAN.html#preprocessing",
    "title": "Reproducing Chen et. al. (2021)’s unsupervised machine learning",
    "section": "1. Preprocessing",
    "text": "1. Preprocessing\n\n1.1 Sample dan Selection\nThese are the criteria:\n\nObserved between 2018 July 25 to 2019 July 1. (Already filtered in Validation)\nWe exclude the FRB sub-bursts which have neither flux nor fluence measurements.\nThe input data for unsupervised learning includes a total of 10 observational and 3 model-dependent parameters. (Described in Parameters)\n\n\n\n1.2 Parameters\n\n\n1.2.1 Observational Parameters\nThe parameters selected by the paper is as follows: - Boxcar Width bc_width - Width of Sub-Burst width_fitb - Flux flux - Fluence fluence - Scattering Time scat_time - Spectral Index sp_idx - Spectral Running sp_run - Highest Frequency high_freq - Lowest Frequency low_freq - Peak Frequency peak_freq\n\n\n1.2.2 Model Dependent Parameters\n\nRedshift z\nRadio Energy logE_rest_400\nRest-Frame Intrinsic Duration logsubw_int_rest\n\n\nfrom typing import List\n\nparams : List[str] = [\n    # Observational\n    \"bc_width\",\n    \"width_fitb\",\n    \"flux\",\n    \"fluence\",\n    \"scat_time\",\n    \"sp_idx\",\n    \"sp_run\",\n    \"high_freq\",\n    \"low_freq\",\n    \"peak_freq\",\n    # Model dependent\n    \"z\",\n    \"logE_rest_400\",\n    \"logsubw_int_rest\"\n]\n\nidentifiers: List[str] = [\n    \"tns_name\",\n    \"repeater_name\"\n]\n\ndropna_subset = ['flux', 'fluence', 'logE_rest_400']\n\nnon_repeating = non_repeating[[*params, *identifiers]]\nrepeating = repeating[[*params, *identifiers]]"
  },
  {
    "objectID": "notebooks/02-UMAP-HDBSCAN.html#dimension-reduction",
    "href": "notebooks/02-UMAP-HDBSCAN.html#dimension-reduction",
    "title": "Reproducing Chen et. al. (2021)’s unsupervised machine learning",
    "section": "2. Dimension Reduction",
    "text": "2. Dimension Reduction\n\n2.1 Split test and training data\n\ntest, train = train_test_split(repeating, test_size=0.9)\n\n\n# to be trained\nselected = pd.concat([train, non_repeating]).dropna(subset=dropna_subset)\n\n\n\n2.2 UMAP\nParameters:\n\nn_neighbors = 8\n\nit controls how UMAP balances between the local structure and the global structure of the data manifolds\n\nn_components = 2\n\nthe resulting dimensionality of the reduced dimension\n\nmin_dist = 0.1\n\nto prevent the resulting low dimensional projections clumping together\n\n\n\nmodel: umap.UMAP = umap.UMAP(n_neighbors=8, n_components=2, min_dist=0.1)\nmap = model.fit(selected[params])\ntest_map = map.transform(test[params])\n\n\nselected['x'] = map.embedding_[:, 0]\nselected['y'] = map.embedding_[:, 1]\nselected['color'] = ['non-repeater' if name == '-9999' else 'repeater (train)' for name in selected['repeater_name']]\n\nselected = selected.sort_values(by=['color'])\n\ntest['x'] = test_map[:,0]\ntest['y'] = test_map[:,1]\ntest['color'] = 'repeater (test)'\n\nto_plot = pd.concat([selected, test])\n\nsns.set_style('dark')\nsns.set_context('paper')\nsns.relplot(data=to_plot, kind='scatter', x='x', y='y', hue='color', hue_order=['non-repeater','repeater (train)','repeater (test)'])\n\n<seaborn.axisgrid.FacetGrid at 0x1dff54e50d0>"
  },
  {
    "objectID": "notebooks/02-UMAP-HDBSCAN.html#hdbscan",
    "href": "notebooks/02-UMAP-HDBSCAN.html#hdbscan",
    "title": "Reproducing Chen et. al. (2021)’s unsupervised machine learning",
    "section": "3. HDBSCAN",
    "text": "3. HDBSCAN\nWe now perform HDBSCAN to cluster data based on the dimensionally reduced data from UMAP.\n\n3.1 Calculation\n\nimport hdbscan\n\nThe paper did not classify the minimum cluster size for HDBSCAN so I tried to find a parameter that fits. The minimum cluster size (clus_size) that fits the paper’s model is 19 as calculated by rounding 0.458 * to_plot.shape[1].\n\nconst = 0.485\nclus_size = round(const * to_plot.shape[1])\n\nmodel_ = hdbscan.HDBSCAN(clus_size)\nto_plot['hdbscan'] = model_.fit_predict(to_plot[['x', 'y']])\nto_plot = to_plot.sort_values(by='hdbscan', ascending=True)\nto_plot['hdbscan'] = to_plot['hdbscan'].astype(str)\nsns.relplot(data=to_plot, kind='scatter', x='x', y='y', hue='hdbscan')\n\n<seaborn.axisgrid.FacetGrid at 0x1df8adc3340>\n\n\n\n\n\n\n\n3.2 Comparison\nIn this section we present the data from Chen et al (2021).\n\nchen2021 = pd.read_csv('../data/raw/external/chen2021_classification.csv')\nchen2021['source'] = 'chen et al 2021'\nsns.relplot(data=chen2021, kind='scatter', x='embedding_x', y='embedding_y', hue='group')\n\n<seaborn.axisgrid.FacetGrid at 0x1df8b491fa0>\n\n\n\n\n\nAs you can see, Chen et al (2021) contains 9 clusters while the one we did have 12 clusters. The number of clusters itself is irrelevant but the size of clusters is. What we want to know is whether or not we can replicate the classification of repeater clusters from non-repeater clusters.\nA cluster is considered repeater cluster is the total number of more than 10% repeating FRB exists in the cluster. Other FRBs inside the repeater cluster is determined to be ‘potentially’ repeating. Then, we compare the division between this notebook and Chen et al (2021).\n\n# Determining repeater clusters (>10% is repeater FRB)\nthis = to_plot[['tns_name','x','y', 'hdbscan', 'color']].rename(columns={'x': 'embedding_x', 'y':'embedding_y', 'hdbscan': 'label', 'color': 'repeater'})\nthis['source'] = 'calculated'\nthis['repeater'] = [False if name == 'non-repeater' else True for name in this['repeater']]\na = this.groupby('label').aggregate('mean', numeric_only=True)\na['group'] = ['repeater_cluster' if row > 0.1 else 'other_cluster' for row in a['repeater']]\na.reset_index()\nthis = this.merge(a[['group']], on='label')\n\n# Rename groups to only separate repeater clusters from other clusters\nchen2021['group'] = chen2021['group'].apply(lambda x: x[:-2])\n\ndata: pd.DataFrame = pd.concat([this, chen2021])\nsns.relplot(data=data, kind='scatter', x='embedding_x', y='embedding_y', hue='group', col='source')\n\n<seaborn.axisgrid.FacetGrid at 0x1df8b23fa60>\n\n\n\n\n\nThe division fairly replicates the one from Chen et al. (2021). However, some of the top left corner of the embedding is not classified as repeater in this notebook while it is in Chen et al. (2021). We can continue analysis with more graphs from Chen et al. (2021)."
  },
  {
    "objectID": "notebooks/03-filter-repeaters.html",
    "href": "notebooks/03-filter-repeaters.html",
    "title": "Masters Project",
    "section": "",
    "text": "import pandas as pd\n\n# TODO Clean this\n\n\nhashimoto: pd.DataFrame = pd.read_csv('../data/raw/external/Hashimoto2022_chimefrbcat1.csv')\nhashimoto\n\n\n\n\n\n  \n    \n      \n      tns_name\n      previous_name\n      repeater_name\n      ra\n      ra_err\n      ra_notes\n      dec\n      dec_err\n      dec_notes\n      gl\n      ...\n      weight_fluence_error_m\n      weight\n      weight_error_p\n      weight_error_m\n      weighted_logrhoA\n      weighted_logrhoA_error_p\n      weighted_logrhoA_error_m\n      weighted_logrhoB\n      weighted_logrhoB_error_p\n      weighted_logrhoB_error_m\n    \n  \n  \n    \n      0\n      FRB20180725A\n      180725.J0613+67\n      -9999\n      93.42\n      0.04\n      -9999\n      67.10\n      0.20\n      -9999\n      147.29\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      FRB20180727A\n      180727.J1311+26\n      -9999\n      197.70\n      0.10\n      -9999\n      26.40\n      0.30\n      -9999\n      24.76\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      FRB20180729A\n      180729.J1316+55\n      -9999\n      199.40\n      0.10\n      -9999\n      55.58\n      0.08\n      -9999\n      115.26\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      3\n      FRB20180729B\n      180729.J0558+56\n      -9999\n      89.90\n      0.30\n      -9999\n      56.50\n      0.20\n      -9999\n      156.90\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      FRB20180730A\n      180730.J0353+87\n      -9999\n      57.39\n      0.03\n      -9999\n      87.20\n      0.20\n      -9999\n      125.11\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      594\n      FRB20190701A\n      -9999\n      -9999\n      277.50\n      0.20\n      -9999\n      59.00\n      0.20\n      -9999\n      88.29\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      595\n      FRB20190701B\n      -9999\n      -9999\n      302.90\n      0.20\n      -9999\n      80.20\n      0.20\n      -9999\n      112.88\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      596\n      FRB20190701C\n      -9999\n      -9999\n      96.40\n      0.20\n      -9999\n      81.60\n      0.30\n      -9999\n      132.18\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      597\n      FRB20190701D\n      -9999\n      -9999\n      112.10\n      0.20\n      -9999\n      66.70\n      0.20\n      -9999\n      149.28\n      ...\n      0.000649\n      1.361506\n      0.574701\n      0.206776\n      0.813142\n      0.485293\n      0.109293\n      0.894742\n      0.25519\n      0.19035\n    \n    \n      598\n      FRB20190701E\n      -9999\n      -9999\n      138.60\n      0.20\n      -9999\n      61.71\n      0.04\n      -9999\n      153.27\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n599 rows × 107 columns\n\n\n\n\ndata = hashimoto.groupby('repeater_name').groups\ndata.pop('-9999') # Removes non repeaters\nrepeaters = pd.DataFrame({'name': data.keys(), 'sample_id':data.values()})\nrepeaters = repeaters.explode(['sample_id'])\ndf = hashimoto.reset_index()\nrp = repeaters.merge(df[['index','tns_name']], right_on='index', left_on='sample_id')#.rename(columns={'tns_name': 'samples'})[['name', 'samples']]\nrp.groupby('name').tns_name.aggregate(list)\nrptes = rp.groupby('name').tns_name.aggregate(list).items()\nrptrs = pd.DataFrame(rptes, columns=['name', 'samples'])\nrptrs['source'] = 'Hashimoto2022'\nrptrs.to_json('../data/raw/collected/repeaters.json', orient='records', indent=4)\n\n\n# Convert FRBSTATS Repeaters list into our JSON\ndf = pd.read_json('../data/raw/external/FRBSTAT2022-11-23_repeaters.json')['children'].explode()\ndf = pd.DataFrame.from_records([*df])\nchildren = df['children'].explode().reset_index().groupby('index').apply(lambda x: x['children'].apply(lambda x: x.get('name')))\ndf = df.reset_index().merge(children, on='index').rename(columns={'children_y': 'samples'})[['name', 'samples']]\ndf.to_json('../data/raw/collected/FRBSTATS2022-11-23_repeaters.json', orient='records', indent=4)"
  },
  {
    "objectID": "notebooks/04-UMAP-HDBSCAN-reduced-params.html",
    "href": "notebooks/04-UMAP-HDBSCAN-reduced-params.html",
    "title": "UMAP-HDBSCAN Reduced Parameters",
    "section": "",
    "text": "Note\n\n\n\n📌 Goal: This notebook tries to reproduce the results from https://ui.adsabs.harvard.edu/abs/2022MNRAS.509.1227C/abstract with reduced parameters."
  },
  {
    "objectID": "notebooks/04-UMAP-HDBSCAN-reduced-params.html#getting-the-data",
    "href": "notebooks/04-UMAP-HDBSCAN-reduced-params.html#getting-the-data",
    "title": "UMAP-HDBSCAN Reduced Parameters",
    "section": "0. Getting the Data",
    "text": "0. Getting the Data\n\n0.1 Source\nThe paper uses data from CHIME/FRB Catalog with parameters calculated in Hashimoto et. al. 2022.\n\ncatalog: pd.DataFrame = pd.read_csv('../data/raw/external/Hashimoto2022_chimefrbcat1.csv')\ncatalog\n\n\n\n\n\n  \n    \n      \n      tns_name\n      previous_name\n      repeater_name\n      ra\n      ra_err\n      ra_notes\n      dec\n      dec_err\n      dec_notes\n      gl\n      ...\n      weight_fluence_error_m\n      weight\n      weight_error_p\n      weight_error_m\n      weighted_logrhoA\n      weighted_logrhoA_error_p\n      weighted_logrhoA_error_m\n      weighted_logrhoB\n      weighted_logrhoB_error_p\n      weighted_logrhoB_error_m\n    \n  \n  \n    \n      0\n      FRB20180725A\n      180725.J0613+67\n      -9999\n      93.42\n      0.04\n      -9999\n      67.10\n      0.20\n      -9999\n      147.29\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      FRB20180727A\n      180727.J1311+26\n      -9999\n      197.70\n      0.10\n      -9999\n      26.40\n      0.30\n      -9999\n      24.76\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      FRB20180729A\n      180729.J1316+55\n      -9999\n      199.40\n      0.10\n      -9999\n      55.58\n      0.08\n      -9999\n      115.26\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      3\n      FRB20180729B\n      180729.J0558+56\n      -9999\n      89.90\n      0.30\n      -9999\n      56.50\n      0.20\n      -9999\n      156.90\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      FRB20180730A\n      180730.J0353+87\n      -9999\n      57.39\n      0.03\n      -9999\n      87.20\n      0.20\n      -9999\n      125.11\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      594\n      FRB20190701A\n      -9999\n      -9999\n      277.50\n      0.20\n      -9999\n      59.00\n      0.20\n      -9999\n      88.29\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      595\n      FRB20190701B\n      -9999\n      -9999\n      302.90\n      0.20\n      -9999\n      80.20\n      0.20\n      -9999\n      112.88\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      596\n      FRB20190701C\n      -9999\n      -9999\n      96.40\n      0.20\n      -9999\n      81.60\n      0.30\n      -9999\n      132.18\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      597\n      FRB20190701D\n      -9999\n      -9999\n      112.10\n      0.20\n      -9999\n      66.70\n      0.20\n      -9999\n      149.28\n      ...\n      0.000649\n      1.361506\n      0.574701\n      0.206776\n      0.813142\n      0.485293\n      0.109293\n      0.894742\n      0.25519\n      0.19035\n    \n    \n      598\n      FRB20190701E\n      -9999\n      -9999\n      138.60\n      0.20\n      -9999\n      61.71\n      0.04\n      -9999\n      153.27\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n599 rows × 107 columns\n\n\n\n\n\n0.2 Dataset Validation\nWe first validate that the data is as described in the paper. According to the paper:\n\n\nThe initial dataset includes 501 non-repeating FRB sub-bursts from 474 sources and 93 repeating FRB sub-bursts from 18 sources.\n\n\nThe catalogue includes 535 FRBs at a frequency range between 400 and 800 MHz from 2018 July 25 to 2019 July 1. Since a repeating FRB source provides several FRBs and each FRB might include several sub-bursts, the actual number of applying subburst samples are 501 non-repeating + 93 repeating = 594 sub-bursts.\n\n\nWe can verify this using a simple dataframe method.\n\nstart: float = Time('2018-07-25').mjd\nend: float = Time('2019-07-01').mjd\n\ninterval: pd.Series = (start <= catalog['mjd_400']) & (catalog['mjd_400'] <= end)\ncatalog: pd.DataFrame = catalog[interval]\n\nrepeating: pd.DataFrame = catalog[(catalog['repeater_name'] != \"-9999\")]\nnon_repeating: pd.DataFrame = catalog[(catalog['repeater_name'] == \"-9999\")]\nprint(f\"Total repeaters\\t\\t: {len(repeating)}\",f\"Total non-repeaters\\t: {len(non_repeating)}\", sep=\"\\n\")\nprint(f\"Total sub-bursts\\t: {len(repeating) + len(non_repeating)}\")\n\nTotal repeaters     : 93\nTotal non-repeaters : 501\nTotal sub-bursts    : 594\n\n\n\n\n\n\n\n\nNote\n\n\n\nTODO Apply filter to get the number of sources. This filter only gets the number of sub bursts.\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat does the authors mean by “The catalogue includes 535 FRBs”? I could not think of a filter that fits the description."
  },
  {
    "objectID": "notebooks/04-UMAP-HDBSCAN-reduced-params.html#preprocessing",
    "href": "notebooks/04-UMAP-HDBSCAN-reduced-params.html#preprocessing",
    "title": "UMAP-HDBSCAN Reduced Parameters",
    "section": "1. Preprocessing",
    "text": "1. Preprocessing\n\n1.1 Sample dan Selection\nThese are the criteria:\n\nObserved between 2018 July 25 to 2019 July 1. (Already filtered in Validation)\nWe exclude the FRB sub-bursts which have neither flux nor fluence measurements.\nThe input data for unsupervised learning includes a total of 10 observational and 3 model-dependent parameters. (Described in Parameters)\n\n\n\n1.2 Parameters\n\n\n1.2.1 Observational Parameters\nThe parameters selected by the paper is as follows: - Boxcar Width bc_width - Width of Sub-Burst width_fitb - Flux flux - Fluence fluence - Scattering Time scat_time - Spectral Index sp_idx - Spectral Running sp_run - Highest Frequency high_freq - Lowest Frequency low_freq - Peak Frequency peak_freq\n\n\n1.2.2 Model Dependent Parameters\n\nRedshift z\nRadio Energy logE_rest_400\nRest-Frame Intrinsic Duration logsubw_int_rest\n\n\n[cols for cols in catalog.columns]\n\n['tns_name',\n 'previous_name',\n 'repeater_name',\n 'ra',\n 'ra_err',\n 'ra_notes',\n 'dec',\n 'dec_err',\n 'dec_notes',\n 'gl',\n 'gb',\n 'exp_up',\n 'exp_up_err',\n 'exp_up_notes',\n 'exp_low',\n 'exp_low_err',\n 'exp_low_notes',\n 'bonsai_snr',\n 'bonsai_dm',\n 'low_ft_68',\n 'up_ft_68',\n 'low_ft_95',\n 'up_ft_95',\n 'snr_fitb',\n 'dm_fitb',\n 'dm_fitb_err',\n 'dm_exc_ne2001',\n 'dm_exc_ymw16',\n 'bc_width',\n 'scat_time',\n 'scat_time_err',\n 'flux',\n 'flux_err',\n 'flux_notes',\n 'fluence',\n 'fluence_err',\n 'fluence_notes',\n 'sub_num',\n 'mjd_400',\n 'mjd_400_err',\n 'mjd_inf',\n 'mjd_inf_err',\n 'width_fitb',\n 'width_fitb_err',\n 'sp_idx',\n 'sp_idx_err',\n 'sp_run',\n 'sp_run_err',\n 'high_freq',\n 'low_freq',\n 'peak_freq',\n 'chi_sq',\n 'dof',\n 'flag_frac',\n 'excluded_flag',\n 'subw_upper_flag',\n 'scat_upper_flag',\n 'spec_z',\n 'spec_z_flag',\n 'E_obs',\n 'E_obs_error',\n 'subb_flag',\n 'subb_p_flag',\n 'common_p_flag',\n 'delta_nuo_FRB',\n 'z_DM',\n 'z_DM_error_p',\n 'z_DM_error_m',\n 'E_obs_400',\n 'E_obs_400_error_p',\n 'E_obs_400_error_m',\n 'logsubw_int_rest',\n 'logsubw_int_rest_error_p',\n 'logsubw_int_rest_error_m',\n 'z',\n 'z_error_p',\n 'z_error_m',\n 'logE_rest_400',\n 'logE_rest_400_error_p',\n 'logE_rest_400_error_m',\n 'logrhoA',\n 'logrhoA_error_p',\n 'logrhoA_error_m',\n 'logrhoB',\n 'logrhoB_error_p',\n 'logrhoB_error_m',\n 'weight_DM',\n 'weight_DM_error_p',\n 'weight_DM_error_m',\n 'weight_scat',\n 'weight_scat_error_p',\n 'weight_scat_error_m',\n 'weight_w_int',\n 'weight_w_int_error_p',\n 'weight_w_int_error_m',\n 'weight_fluence',\n 'weight_fluence_error_p',\n 'weight_fluence_error_m',\n 'weight',\n 'weight_error_p',\n 'weight_error_m',\n 'weighted_logrhoA',\n 'weighted_logrhoA_error_p',\n 'weighted_logrhoA_error_m',\n 'weighted_logrhoB',\n 'weighted_logrhoB_error_p',\n 'weighted_logrhoB_error_m']\n\n\n\nfrom typing import List\n\nparams : List[str] = [\n    # Observational\n    # \"bc_width\",\n    \"width_fitb\",\n    \"flux\",\n    \"fluence\",\n    # \"scat_time\",\n    # \"sp_idx\",\n    # \"sp_run\",\n    # \"high_freq\",\n    # \"low_freq\",\n    \"peak_freq\",\n    # Model dependent\n    \"z\",\n    # \"logE_rest_400\",\n    # \"logsubw_int_rest\"\n]\n\nidentifiers: List[str] = [\n    \"tns_name\",\n    \"repeater_name\"\n]\n\ndropna_subset = ['flux', 'fluence']#, 'logE_rest_400']\n\nnon_repeating = non_repeating[[*params, *identifiers]]\nrepeating = repeating[[*params, *identifiers]]"
  },
  {
    "objectID": "notebooks/04-UMAP-HDBSCAN-reduced-params.html#dimension-reduction",
    "href": "notebooks/04-UMAP-HDBSCAN-reduced-params.html#dimension-reduction",
    "title": "UMAP-HDBSCAN Reduced Parameters",
    "section": "2. Dimension Reduction",
    "text": "2. Dimension Reduction\n\n2.1 Split test and training data\n\ntest, train = train_test_split(repeating, test_size=0.9)\n\n\n# to be trained\nselected = pd.concat([train, non_repeating]).dropna(subset=dropna_subset)\n\n\n\n2.2 UMAP\nParameters:\n\nn_neighbors = 8\n\nit controls how UMAP balances between the local structure and the global structure of the data manifolds\n\nn_components = 2\n\nthe resulting dimensionality of the reduced dimension\n\nmin_dist = 0.1\n\nto prevent the resulting low dimensional projections clumping together\n\n\n\nmodel: umap.UMAP = umap.UMAP(n_neighbors=8, n_components=2, min_dist=0.1)\nmap = model.fit(selected[params])\ntest_map = map.transform(test[params])\n\n\nselected['x'] = map.embedding_[:, 0]\nselected['y'] = map.embedding_[:, 1]\nselected['color'] = ['non-repeater' if name == '-9999' else 'repeater (train)' for name in selected['repeater_name']]\n\nselected = selected.sort_values(by=['color'])\n\ntest['x'] = test_map[:,0]\ntest['y'] = test_map[:,1]\ntest['color'] = 'repeater (test)'\n\nto_plot = pd.concat([selected, test])\n\nsns.set_style('dark')\nsns.set_context('paper')\nsns.relplot(data=to_plot, kind='scatter', x='x', y='y', hue='color', hue_order=['non-repeater','repeater (train)','repeater (test)'])\n\n<seaborn.axisgrid.FacetGrid at 0x2b56b6b3f70>"
  },
  {
    "objectID": "notebooks/04-UMAP-HDBSCAN-reduced-params.html#hdbscan",
    "href": "notebooks/04-UMAP-HDBSCAN-reduced-params.html#hdbscan",
    "title": "UMAP-HDBSCAN Reduced Parameters",
    "section": "3. HDBSCAN",
    "text": "3. HDBSCAN\nWe now perform HDBSCAN to cluster data based on the dimensionally reduced data from UMAP.\n\n3.1 Calculation\n\nimport hdbscan\n\nThe paper did not classify the minimum cluster size for HDBSCAN so I tried to find a parameter that fits. The minimum cluster size (clus_size) that fits the paper’s model is 19 as calculated by rounding 0.458 * to_plot.shape[1].\n\nconst = 0.8\nclus_size = round(const * to_plot.shape[1])\n\nmodel_ = hdbscan.HDBSCAN(clus_size)\nto_plot['hdbscan'] = model_.fit_predict(to_plot[['x', 'y']])\nto_plot = to_plot.sort_values(by='hdbscan', ascending=True)\nto_plot['hdbscan'] = to_plot['hdbscan'].astype(str)\nsns.relplot(data=to_plot, kind='scatter', x='x', y='y', hue='hdbscan')\n\n<seaborn.axisgrid.FacetGrid at 0x2b56b41a2b0>\n\n\n\n\n\n\n\n3.2 Comparison\nIn this section we present the data from Chen et al (2021).\n\nchen2021 = pd.read_csv('../data/raw/external/chen2021_classification.csv')\nchen2021['source'] = 'chen et al 2021'\nsns.relplot(data=chen2021, kind='scatter', x='embedding_x', y='embedding_y', hue='group')\n\n<seaborn.axisgrid.FacetGrid at 0x2b56ac131f0>\n\n\n\n\n\nAs you can see, Chen et al (2021) contains 9 clusters while the one we did have 12 clusters. The number of clusters itself is irrelevant but the size of clusters is. What we want to know is whether or not we can replicate the classification of repeater clusters from non-repeater clusters.\nA cluster is considered repeater cluster is the total number of more than 10% repeating FRB exists in the cluster. Other FRBs inside the repeater cluster is determined to be ‘potentially’ repeating. Then, we compare the division between this notebook and Chen et al (2021).\n\n# Determining repeater clusters (>10% is repeater FRB)\nthis = to_plot[['tns_name','x','y', 'hdbscan', 'color']].rename(columns={'x': 'embedding_x', 'y':'embedding_y', 'hdbscan': 'label', 'color': 'repeater'})\nthis['source'] = 'calculated'\nthis['repeater'] = [False if name == 'non-repeater' else True for name in this['repeater']]\na = this.groupby('label').aggregate('mean', numeric_only=True)\na['group'] = ['repeater_cluster' if row > 0.1 else 'other_cluster' for row in a['repeater']]\na.reset_index()\nthis = this.merge(a[['group']], on='label')\n\n# Rename groups to only separate repeater clusters from other clusters\nchen2021['group'] = chen2021['group'].apply(lambda x: x[:-2])\n\ndata: pd.DataFrame = pd.concat([this, chen2021])\nsns.relplot(data=data, kind='scatter', x='embedding_x', y='embedding_y', hue='group', col='source')\n\n<seaborn.axisgrid.FacetGrid at 0x2b56d3b2670>\n\n\n\n\n\nThe division fairly replicates the one from Chen et al. (2021). However, some of the top left corner of the embedding is not classified as repeater in this notebook while it is in Chen et al. (2021). We can continue analysis with more graphs from Chen et al. (2021)."
  },
  {
    "objectID": "notebooks/05-calculate-params.html",
    "href": "notebooks/05-calculate-params.html",
    "title": "Parameter calculation of available data",
    "section": "",
    "text": "Note\n\n\n\n📌 Goal: This notebook tries to calculate some missing parameters from FRBSTATS using methods described in Jia-Wei Luo (2022)"
  },
  {
    "objectID": "notebooks/05-calculate-params.html#getting-the-data",
    "href": "notebooks/05-calculate-params.html#getting-the-data",
    "title": "Parameter calculation of available data",
    "section": "0. Getting The Data",
    "text": "0. Getting The Data\n\n0.1 Source\nThis notebook uses data from FRBSTATS\n\ndatapath = Path('..', 'data')\nexternal_datapath = Path(datapath, 'raw', 'external')\n\n\ncatalog: pd.DataFrame = pd.read_csv(Path(external_datapath, \"FRBSTATS2022-11-23_population.csv\")).replace(\"-\", None)\n# Labeling repeaters\nrptrs: pd.DataFrame = pd.read_csv(Path(external_datapath, \"FRBSTATS2022-11-23_repeaters.csv\"))\ncatalog[\"label\"] = [\n    \"repeater\"\n    if name in [*rptrs[\"name\"].to_list(), *rptrs[\"samples\"].to_list()]\n    else \"non-repeater\"\n    for name in catalog[\"frb\"]\n]\ncatalog[\"repeater\"] = [\n    False if name == \"non-repeater\" else True for name in catalog[\"label\"]\n]\ncatalog = catalog.dropna(axis=0, subset=['flux', 'fluence', 'redshift', 'frequency']).astype({'flux': float, 'fluence': float, 'width': float, 'redshift': float})\ncatalog.info()\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 636 entries, 0 to 813\nData columns (total 22 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   frb                636 non-null    object \n 1   utc                636 non-null    object \n 2   mjd                636 non-null    float64\n 3   telescope          636 non-null    object \n 4   ra                 636 non-null    object \n 5   dec                636 non-null    object \n 6   l                  636 non-null    float64\n 7   b                  636 non-null    float64\n 8   frequency          636 non-null    float64\n 9   dm                 636 non-null    float64\n 10  flux               636 non-null    float64\n 11  width              634 non-null    float64\n 12  fluence            636 non-null    float64\n 13  snr                634 non-null    object \n 14  reference          636 non-null    object \n 15  redshift           636 non-null    float64\n 16  redshift_measured  16 non-null     object \n 17  ra_error           587 non-null    object \n 18  dec_error          587 non-null    object \n 19  dm_error           628 non-null    object \n 20  label              636 non-null    object \n 21  repeater           636 non-null    bool   \ndtypes: bool(1), float64(9), object(12)\nmemory usage: 109.9+ KB"
  },
  {
    "objectID": "notebooks/05-calculate-params.html#parameters",
    "href": "notebooks/05-calculate-params.html#parameters",
    "title": "Parameter calculation of available data",
    "section": "1. Parameters",
    "text": "1. Parameters\n\n1.1 Brightness Temperature\n\\[\n    T_B = \\frac{S_\\nu D_L^2}{2\\pi k_B (\\nu\\Delta t)^2(1+z)}\n\\tag{1}\\] where: - \\(S_\\nu\\) = peak specific flux, in Jy - \\(D_L\\) = luminosity distance, in Gpc - \\(\\Delta t\\) = burst duration, in ms - \\(\\nu\\) = central frequency, in GHz - \\(k_B\\) = Boltzmann constant - \\(z\\) = redshift\n\nH_0 = 67.4*1000*100  # cm s^-1 Mpc^-1\nc = 29979245800 # cm s^-1\nMpc_to_cm = 3.085677581491367E24\nGyr_to_s = 3.15576E16\nHubble_time = 1/(H_0 / Mpc_to_cm * Gyr_to_s)  # Gyr\nHubble_distance = c/H_0  # Mpc\nOmega_b = 0.0224/((H_0)/1000/100/100)**2\nOmega_m = 0.315\nOmega_Lambda = 0.685\nf_IGM = 0.83\nchi = 7/8\nG = 6.6743e-8 # cm^3 g^-1 s^-2\nm_p = 1.67262192e-24 # g\ndm_factor = 3*c*H_0/(Mpc_to_cm)**2*1e6*Omega_b*f_IGM*chi/(8*np.pi*G*m_p)\nDM_host_lab = 70.0 # pc cm^-3\nDM_halo = 30.0\n\ndef comoving_distance_at_z(z): # Mpc\n    zp1 = 1.0+z\n    h0_up = np.sqrt(1+Omega_m/Omega_Lambda) * scipy.special.hyp2f1(1/3,1/2,4/3,-Omega_m/Omega_Lambda)\n    hz_up = zp1 * np.sqrt(1+Omega_m*zp1**3/Omega_Lambda) * scipy.special.hyp2f1(1/3,1/2,4/3,-Omega_m*zp1**3/Omega_Lambda)\n    h0_down = np.sqrt(Omega_Lambda + Omega_m)\n    hz_down = np.sqrt(Omega_Lambda + Omega_m * zp1**3)\n    return Hubble_distance * (hz_up/hz_down-h0_up/h0_down)\n\n\ndef luminosity_distance_at_z(z): # Mpc\n    return (1. + z) * comoving_distance_at_z(z)\n\n# ? I am not sure why it is log_10 of the value when there is none in formula?\n#   Maybe need to do some pen and paper.\ncatalog['brightness_temperature'] = np.log10(1.1e35 \n                            * catalog['flux'] \n                            * (catalog['width']*1000)**(-2) \n                            * (catalog['frequency']/1000)**(-2) \n                            * (luminosity_distance_at_z(catalog['redshift'])/1000)**2 / (1+catalog['redshift'])\n                        )"
  },
  {
    "objectID": "notebooks/05-calculate-params.html#redshift-corrected-frequency",
    "href": "notebooks/05-calculate-params.html#redshift-corrected-frequency",
    "title": "Parameter calculation of available data",
    "section": "1.2 Redshift Corrected Frequency",
    "text": "1.2 Redshift Corrected Frequency\nA redshift is calculated using: \\[\n    1 + z = \\frac{f_\\text{emit}}{f_\\text{obs}}\n\\] therefore, the emission frequency is: \\[\n    f_\\text{emit} = f_\\text{obs}(1 + z)\n\\] where we take the observed frequency to be the peak frequency.\n\ncatalog['rest_frequency'] = catalog['frequency'] * (1 + catalog['redshift'])"
  },
  {
    "objectID": "notebooks/05-calculate-params.html#energy",
    "href": "notebooks/05-calculate-params.html#energy",
    "title": "Parameter calculation of available data",
    "section": "1.3 Energy",
    "text": "1.3 Energy\n\\[\n    E = 4\\pi \\frac{D_L^2 F \\nu_c}{1-z}\n\\tag{2}\\] where: - \\(E\\) = energy, in erg - \\(F\\) = fluence, in Jy ms - \\(\\nu_c\\) = peak frequence, in MHz\n\n# TODO Check units of all these calculations\ncatalog['energy'] = 1e-23 * catalog['frequency'] * 1e6 * catalog['fluence'] / 1000 * (4*np.pi*(luminosity_distance_at_z(catalog['redshift'])*Mpc_to_cm)**2) / (1+catalog['redshift'])"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This repository is meant to document my Masters in Physics’ work under Dr Noriah Hashim and Dr Zambri Zainal in University Malaya.\n\n\nThese problem statements are taken from the proposal and will likely change and become more specific in the future:\n\nWhat relationship of its properties can be extracted from the population of known FRBs now that we have more than 800 observed transients?\nWhich FRBs exhibit interesting properties compared to the rest of the population?\nWhat might be the reason behind the interesting properties of the FRBs in question (2)?\n\n\n\n\nThe cfod package used to access the CHIME/FRB catalog requires Linux or WSL. The fruitbat package used to calculate redshift requires Linux or WSL.\n\n\n\n\nPhantom Data (Refer to Affan. It relates to how his Polar BEAR detects phantom data)\nClassification of repeating FRBs\nTrends of 800 FRB / Possible Predict Periodicity for repeater candidates\nNew FRB\nUnique Old FRB"
  }
]