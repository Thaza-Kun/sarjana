set shell := ["nu", "-c"]

periodogram name rate folder="../data/catalog2023" n="100":
    python pdgram_lomb_scargle.py --folder {{folder}} --name {{name}} --n {{n}} --rate {{rate}} --outdir ../output/img/

    python greedy_harmonic_sum.py --pgram {{folder}}/{{name}}/pdgram-LombScargle.npy --grid {{folder}}/{{name}}/pdgram-freq-grid.npy --method "Lomb-Scargle" --outdir ../output/img/{{name}}/
    
    python eval_SNR_per_power.py --pgram {{folder}}/{{name}}/pdgram-LombScargle.npy --grid {{folder}}/{{name}}/pdgram-freq-grid.npy --snr {{folder}}/{{name}}/pdgram-LombScargle.npy-SNR.npy --outdir ../output/img/{{name}}/ --method "Lomb-Scargle"
    
    python pdgram_pdm.py --folder {{folder}} --name {{name}} --n {{n}} --rate {{rate}} --outdir ../output/img/
    
    python greedy_harmonic_sum.py --pgram {{folder}}/{{name}}/pdgram-PhaseDispMin.npy --grid {{folder}}/{{name}}/pdgram-PhaseDispMin-freq-grid.npy --outdir ../output/img/{{name}}/ --method PDM --inverse true
    
    python eval_SNR_per_power.py --pgram {{folder}}/{{name}}/pdgram-PhaseDispMin.npy --grid {{folder}}/{{name}}/pdgram-PhaseDispMin-freq-grid.npy --snr {{folder}}/{{name}}/pdgram-PhaseDispMin.npy-SNR.npy --outdir ../output/img/{{name}}/ --method "PDM"

    python pdgram_duty_cycle.py --folder {{folder}} --name {{name}} --n {{n}} --rate {{rate}} --outdir ../output/img/
    
    python greedy_harmonic_sum.py --pgram {{folder}}/{{name}}/pdgram-DutyCycle.npy --grid {{folder}}/{{name}}/pdgram-freq-grid.npy --outdir ../output/img/{{name}}/ --method "Duty Cycle"
    
    python eval_SNR_per_power.py --pgram {{folder}}/{{name}}/pdgram-DutyCycle.npy --grid {{folder}}/{{name}}/pdgram-freq-grid.npy --snr {{folder}}/{{name}}/pdgram-DutyCycle.npy-SNR.npy --outdir ../output/img/{{name}}/ --method "Duty Cycle"

eval_snr_per_power name folder="../data/catalog2023":
    python eval_SNR_per_power.py --pgram {{folder}}/{{name}}/pdgram-LombScargle.npy --grid {{folder}}/{{name}}/pdgram-freq-grid.npy --snr {{folder}}/{{name}}/pdgram-LombScargle.npy-SNR.npy --outdir ../output/img/{{name}}/ --method "Lomb-Scargle"
    
    python eval_SNR_per_power.py --pgram {{folder}}/{{name}}/pdgram-PhaseDispMin.npy --grid {{folder}}/{{name}}/pdgram-PhaseDispMin-freq-grid.npy --snr {{folder}}/{{name}}/pdgram-PhaseDispMin.npy-SNR.npy --outdir ../output/img/{{name}}/ --method "PDM"

    python eval_SNR_per_power.py --pgram {{folder}}/{{name}}/pdgram-DutyCycle.npy --grid {{folder}}/{{name}}/pdgram-freq-grid.npy --snr {{folder}}/{{name}}/pdgram-DutyCycle.npy-SNR.npy --outdir ../output/img/{{name}}/ --method "Duty Cycle"

simulate_all n="1000":
    #!nu
    date now | format date "%Y-%m-%d %H:%M:%S " | save --append sim-log.txt 
    
    "[START]\n" | save --append sim-log.txt
    
    let items = [
        ["FRB20180916B", 4.48   , "../data/catalog2021-2/", 16.33],
        ["FRB20201130A", 2.34   ],
        ["FRB20191106C", 2.54e-2],
        ["FRB20200619A", 1.3e-2 ],
        ["FRB20190804E", 1.52e-2],
        ["FRB20190915D", 2.56e-1],
        ["FRB20200929C", 1.45e-1],
        ["FRB20201221B", 3.78e-2],
        ["FRB20200809E", 2.81e-3],
        ["FRB20190609C", 7.3e-3 ],
        ["FRB20190226B", 3.65e-3],
        ["FRB20200223B", 1.44e-1],
        ["FRB20200202A", 6.53e-2],
        ["FRB20190430C", 2.36e-1],
        ["FRB20200420A", 9.58e-4],
        ["FRB20200127B", 1.05e-2],
        ["FRB20201114A", 2.33e-2],
        ["FRB20190110C", 8e-3   ],
        ["FRB20200118D", 3.3e-3 ],
        ["FRB20181226F", 2.37e-3],
        ["FRB20191013D", 7.09e-2],
        ["FRB20191114A", 1.36e-2],
        ["FRB20190113A", 4.97e-2],
        ["FRB20200913C", 2.85e-3],
        ["FRB20200926A", 1.58e-3],
        ["FRB20180910A", 3.83e-3],
    ]

    for item in $items {
        try {
            echo $"($item)"
            
            if (($item | length) >= 3) {
            python ensemble_generate.py --parent $item.2 --name $item.0 -o ../output/2024-05-31/ --runs {{n}} --rate $item.1 --periodogram LS
            python ensemble_generate.py --parent $item.2 --name $item.0 -o ../output/2024-05-31/ --runs {{n}} --rate $item.1 --periodogram PDM
            } else {
            python ensemble_generate.py --parent ../data/catalog2023 --name $item.0 -o ../output/2024-05-31/ --runs {{n}} --rate $item.1 --periodogram LS
            python ensemble_generate.py --parent ../data/catalog2023 --name $item.0 -o ../output/2024-05-31/ --runs {{n}} --rate $item.1 --periodogram PDM
            }
            
            
            date now | format date "%Y-%m-%d %H:%M:%S " | save --append sim-log.txt
            
            $"DATA ($item.0)\n" | save --append sim-log.txt
            
        } catch {
        
            date now | format date $"%Y-%m-%d %H:%M:%S [ERROR] ($item.0)\n" | save --append sim-log.txt
    }
    }
    for item in $items {
        try {
            echo $"($item)"

            if (($item | length) >= 3) {
                python ensemble_plot_single.py --parent $item.2 --name $item.0 -o ../output/2024-05-31/ --runs {{n}} --period $item.3 --rate $item.1 --min-snr 2.5 --min-power 0 --periodogram LS
                python ensemble_plot_single.py --parent $item.2 --name $item.0 -o ../output/2024-05-31/ --runs {{n}} --period $item.3 --rate $item.1 --min-snr 2.5 --min-power -1. --periodogram PDM
                } else {
                python ensemble_plot_single.py --parent ../data/catalog2023 --name $item.0 -o ../output/2024-05-31/ --runs {{n}} --rate $item.1 --min-snr 2.5 --min-power 0 --periodogram LS
                python ensemble_plot_single.py --parent ../data/catalog2023 --name $item.0 -o ../output/2024-05-31/ --runs {{n}} --rate $item.1 --min-snr 2.5 --min-power -1. --periodogram PDM
            }

            
            date now | format date "%Y-%m-%d %H:%M:%S " | save --append sim-log.txt
            
            $"PLOT ($item.0)\n" | save --append sim-log.txt

        } catch {
        
            date now | format date $"%Y-%m-%d %H:%M:%S [ERROR] PLOT ($item.0)\n" | save --append sim-log.txt
        
        }
    }


run:
    #!nu
    date now | format date "%Y-%m-%d %H:%M:%S " | save --append log.txt 
    
    "[START]\n" | save --append log.txt
    
    let items = [
        ["FRB20201130A", 2.34],
        ["FRB20191106C", 2.54e-2],
        ["FRB20200619A", 1.3e-2],
        ["FRB20190804E", 1.52e-2],
        ["FRB20190915D", 2.56e-1],
        ["FRB20200929C", 1.45e-1],
        ["FRB20201221B", 3.78e-2],
        ["FRB20200809E", 2.81e-3],
        ["FRB20190609C", 7.3e-3],
        ["FRB20190226B", 3.65e-3],
        ["FRB20200223B", 1.44e-1],
        ["FRB20200202A", 6.53e-2],
        ["FRB20190430C", 2.36e-1],
        ["FRB20200420A", 9.58e-4],
        ["FRB20200127B", 1.05e-2],
        ["FRB20201114A", 2.33e-2],
        ["FRB20190110C", 8e-3],
        ["FRB20200118D", 3.3e-3],
        ["FRB20181226F", 2.37e-3],
        ["FRB20191013D", 7.09e-2],
        ["FRB20191114A", 1.36e-2],
        ["FRB20190113A", 4.97e-2],
        ["FRB20200913C", 2.85e-3],
        ["FRB20200926A", 1.58e-3],
        ["FRB20180910A", 3.83e-3],
    ]
    
    for item in items {
        try {

            just periodogram $item.0 $item.1
            
            date now | format date "%Y-%m-%d %H:%M:%S " | save --append log.txt
            
            $"($item.0)\n" | save --append log.txt

        } catch {
        
            date now | format date $"%Y-%m-%d %H:%M:%S [ERROR] ($item.0)" | save --append log.txt
        
        }
    }